i = 1    rawName = PACKAGE_DIRECTIVE    class = class org.jetbrains.kotlin.psi.KtPackageDirective (Kotlin reflection is not available)    text:
package scripts

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 1    rawName = IMPORT_LIST    class = class org.jetbrains.kotlin.psi.KtImportList (Kotlin reflection is not available)    text:


ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 1    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:




ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 3    rawName = FUN    class = class org.jetbrains.kotlin.psi.KtNamedFunction (Kotlin reflection is not available)    text:
fun main() {
    var a = intArrayOf(0, 1)
    a = addAndReturn(a)
    add(a)
    val b = 2
    a[1] += b
    val s = "AAA"
    println(s)
    println(a.contentToString())
}

i = 3    rawName = PsiElement(LBRACE)    class = class com.intellij.psi.impl.source.tree.LeafPsiElement (Kotlin reflection is not available)    text:
{

SKIP

i = 3    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 4    rawName = PROPERTY    class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
var a = intArrayOf(0, 1)

ADD: SLICE_ELEMENT

i = 4    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 5    rawName = BINARY_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
a = addAndReturn(a)

ADD: SLICE_ELEMENT

i = 5    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 6    rawName = CALL_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtCallExpression (Kotlin reflection is not available)    text:
add(a)

ADD: SLICE_ELEMENT

i = 6    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 7    rawName = PROPERTY    class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
val b = 2

SKIP

i = 7    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 8    rawName = BINARY_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
a[1] += b

ADD: SLICE_ELEMENT

i = 8    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 9    rawName = PROPERTY    class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
val s = "AAA"

SKIP

i = 9    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 10    rawName = CALL_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtCallExpression (Kotlin reflection is not available)    text:
println(s)

SKIP

i = 10    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 11    rawName = CALL_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtCallExpression (Kotlin reflection is not available)    text:
println(a.contentToString())

ADD: SLICE_ELEMENT

i = 11    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:



ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 12    rawName = PsiElement(RBRACE)    class = class com.intellij.psi.impl.source.tree.LeafPsiElement (Kotlin reflection is not available)    text:
}

SKIP

i = 12    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:




ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 14    rawName = FUN    class = class org.jetbrains.kotlin.psi.KtNamedFunction (Kotlin reflection is not available)    text:
fun add(a: IntArray) {
    a[0] += 1
}

i = 14    rawName = PsiElement(LBRACE)    class = class com.intellij.psi.impl.source.tree.LeafPsiElement (Kotlin reflection is not available)    text:
{

SKIP

i = 14    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 15    rawName = BINARY_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
a[0] += 1

ADD: SLICE_ELEMENT

i = 15    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:



ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 16    rawName = PsiElement(RBRACE)    class = class com.intellij.psi.impl.source.tree.LeafPsiElement (Kotlin reflection is not available)    text:
}

SKIP

i = 16    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:




ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 18    rawName = FUN    class = class org.jetbrains.kotlin.psi.KtNamedFunction (Kotlin reflection is not available)    text:
fun addAndReturn(a: IntArray): IntArray {
    a[0] += 1
    return a
}

i = 18    rawName = PsiElement(LBRACE)    class = class com.intellij.psi.impl.source.tree.LeafPsiElement (Kotlin reflection is not available)    text:
{

SKIP

i = 18    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 19    rawName = BINARY_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
a[0] += 1

ADD: SLICE_ELEMENT

i = 19    rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

ADD: ALWAYS_RETAINED_PSI_ELEMENT

i = 20    rawName = RETURN    class = class org.jetbrains.kotlin.psi.KtReturnExpression (Kotlin reflection is not available)    text:
return a

ADD: SLICE_ELEMENT


==========SLICE ELEMENTS==========

PACKAGE_DIRECTIVE:
 package scripts

IMPORT_LIST:
 

PsiWhiteSpace:
 



FUN:
 fun main() {
    var a = intArrayOf(0, 1)
    a = addAndReturn(a)
    add(a)
    val b = 2
    a[1] += b
    val s = "AAA"
    println(s)
    println(a.contentToString())
}

PsiElement(LBRACE):
 {

PsiElement(RBRACE):
 }

PsiWhiteSpace:
 
    

PROPERTY:
 var a = intArrayOf(0, 1)

PsiWhiteSpace:
 
    

BINARY_EXPRESSION:
 a = addAndReturn(a)

PsiWhiteSpace:
 
    

CALL_EXPRESSION:
 add(a)

PsiWhiteSpace:
 
    

PsiWhiteSpace:
 
    

BINARY_EXPRESSION:
 a[1] += b

PsiWhiteSpace:
 
    

PsiWhiteSpace:
 
    

PsiWhiteSpace:
 
    

CALL_EXPRESSION:
 println(a.contentToString())

PsiWhiteSpace:
 


PsiWhiteSpace:
 



FUN:
 fun add(a: IntArray) {
    a[0] += 1
}

PsiElement(LBRACE):
 {

PsiElement(RBRACE):
 }

PsiWhiteSpace:
 
    

BINARY_EXPRESSION:
 a[0] += 1

PsiWhiteSpace:
 


PsiWhiteSpace:
 



FUN:
 fun addAndReturn(a: IntArray): IntArray {
    a[0] += 1
    return a
}

PsiElement(LBRACE):
 {

PsiElement(RBRACE):
 }

PsiWhiteSpace:
 
    

BINARY_EXPRESSION:
 a[0] += 1

PsiWhiteSpace:
 
    

RETURN:
 return a


==========FORMATTING==========

rawName = PACKAGE_DIRECTIVE    class = class org.jetbrains.kotlin.psi.KtPackageDirective (Kotlin reflection is not available)    text:
package scripts

SKIP

rawName = IMPORT_LIST    class = class org.jetbrains.kotlin.psi.KtImportList (Kotlin reflection is not available)    text:


SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:




SKIP

rawName = FUN    class = class org.jetbrains.kotlin.psi.KtNamedFunction (Kotlin reflection is not available)    text:
fun main() {
    var a = intArrayOf(0, 1)
    a = addAndReturn(a)
    add(a)
    val b = 2
    a[1] += b
    val s = "AAA"
    println(s)
    println(a.contentToString())
}

rawName = PsiElement(LBRACE)    class = class com.intellij.psi.impl.source.tree.LeafPsiElement (Kotlin reflection is not available)    text:
{

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

SKIP

rawName = PROPERTY    class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
var a = intArrayOf(0, 1)

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

SKIP

rawName = BINARY_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
a = addAndReturn(a)

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

SKIP

rawName = CALL_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtCallExpression (Kotlin reflection is not available)    text:
add(a)

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

SKIP

rawName = PROPERTY    class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
val b = 2

DELETE

rawName = BINARY_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
a[1] += b

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

SKIP

rawName = PROPERTY    class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
val s = "AAA"

DELETE

rawName = CALL_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtCallExpression (Kotlin reflection is not available)    text:
println(s)

DELETE

rawName = CALL_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtCallExpression (Kotlin reflection is not available)    text:
println(a.contentToString())

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:



SKIP

rawName = PsiElement(RBRACE)    class = class com.intellij.psi.impl.source.tree.LeafPsiElement (Kotlin reflection is not available)    text:
}

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:




SKIP

rawName = FUN    class = class org.jetbrains.kotlin.psi.KtNamedFunction (Kotlin reflection is not available)    text:
fun add(a: IntArray) {
    a[0] += 1
}

rawName = PsiElement(LBRACE)    class = class com.intellij.psi.impl.source.tree.LeafPsiElement (Kotlin reflection is not available)    text:
{

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

SKIP

rawName = BINARY_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
a[0] += 1

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:



SKIP

rawName = PsiElement(RBRACE)    class = class com.intellij.psi.impl.source.tree.LeafPsiElement (Kotlin reflection is not available)    text:
}

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:




SKIP

rawName = FUN    class = class org.jetbrains.kotlin.psi.KtNamedFunction (Kotlin reflection is not available)    text:
fun addAndReturn(a: IntArray): IntArray {
    a[0] += 1
    return a
}

rawName = PsiElement(LBRACE)    class = class com.intellij.psi.impl.source.tree.LeafPsiElement (Kotlin reflection is not available)    text:
{

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

SKIP

rawName = BINARY_EXPRESSION    class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
a[0] += 1

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:

    

SKIP

rawName = RETURN    class = class org.jetbrains.kotlin.psi.KtReturnExpression (Kotlin reflection is not available)    text:
return a

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:



SKIP

rawName = PsiElement(RBRACE)    class = class com.intellij.psi.impl.source.tree.LeafPsiElement (Kotlin reflection is not available)    text:
}

SKIP

rawName = PsiWhiteSpace    class = class com.intellij.psi.impl.source.tree.PsiWhiteSpaceImpl (Kotlin reflection is not available)    text:



SKIP

