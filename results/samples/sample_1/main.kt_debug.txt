LINE NUMBERS: [2, 6, 8, 20, 26]

LINE NUMBERS AFTER STATIC ANALYSIS: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 20, 21, 22, 23, 24, 26, 30, 31]

PACKAGE_DIRECTIVE: i = 1   class = class org.jetbrains.kotlin.psi.KtPackageDirective (Kotlin reflection is not available)    text:


ADD: ALWAYS_RETAINED_PSI_ELEMENT

IMPORT_LIST: i = 1   class = class org.jetbrains.kotlin.psi.KtImportList (Kotlin reflection is not available)    text:


ADD: ALWAYS_RETAINED_PSI_ELEMENT

FUN: i = 1   class = class org.jetbrains.kotlin.psi.KtNamedFunction (Kotlin reflection is not available)    text:
fun main(){
    val x = readLine()!!.toInt() // 1 !!!
    val y: Int
    val z: Int
    val w: Int
    if (x > 0) { // !!!
        y = 1
        z = 1 // !!!
        w = 1
    } else if (x == 0) {
        y = x + 2
        z = x - 2
        w = x * 2
    } else {
        y = x + 3
        z = x - 3
        w = x * 3
    }

    val t = if (z == 1) { // !!!
            "z"
        } else if (w == 1) {
            str(y)
        } else "a"

    println(t) // !!!
    str(y)
}

ADD: CONTAINER

BLOCK: i = 1   class = class org.jetbrains.kotlin.psi.KtBlockExpression (Kotlin reflection is not available)    text:
{
    val x = readLine()!!.toInt() // 1 !!!
    val y: Int
    val z: Int
    val w: Int
    if (x > 0) { // !!!
        y = 1
        z = 1 // !!!
        w = 1
    } else if (x == 0) {
        y = x + 2
        z = x - 2
        w = x * 2
    } else {
        y = x + 3
        z = x - 3
        w = x * 3
    }

    val t = if (z == 1) { // !!!
            "z"
        } else if (w == 1) {
            str(y)
        } else "a"

    println(t) // !!!
    str(y)
}

ADD: CONTAINER

PROPERTY: i = 2   class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
val x = readLine()!!.toInt() // 1 !!!

ADD: SLICE_ELEMENT

DOT_QUALIFIED_EXPRESSION: i = 2   class = class org.jetbrains.kotlin.psi.KtDotQualifiedExpression (Kotlin reflection is not available)    text:
readLine()!!.toInt()

ADD: SLICE_ELEMENT

PROPERTY: i = 3   class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
val y: Int

ADD: SLICE_ELEMENT

PROPERTY: i = 4   class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
val z: Int

ADD: SLICE_ELEMENT

PROPERTY: i = 5   class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
val w: Int

ADD: SLICE_ELEMENT

IF: i = 6   class = class org.jetbrains.kotlin.psi.KtIfExpression (Kotlin reflection is not available)    text:
if (x > 0) { // !!!
        y = 1
        z = 1 // !!!
        w = 1
    } else if (x == 0) {
        y = x + 2
        z = x - 2
        w = x * 2
    } else {
        y = x + 3
        z = x - 3
        w = x * 3
    }

ADD: SLICE_ELEMENT

BLOCK: i = 6   class = class org.jetbrains.kotlin.psi.KtBlockExpression (Kotlin reflection is not available)    text:
{ // !!!
        y = 1
        z = 1 // !!!
        w = 1
    }

ADD: SLICE_ELEMENT

BINARY_EXPRESSION: i = 7   class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
y = 1

ADD: SLICE_ELEMENT

BINARY_EXPRESSION: i = 8   class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
z = 1

ADD: SLICE_ELEMENT

BINARY_EXPRESSION: i = 9   class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
w = 1

ADD: SLICE_ELEMENT

IF: i = 10   class = class org.jetbrains.kotlin.psi.KtIfExpression (Kotlin reflection is not available)    text:
if (x == 0) {
        y = x + 2
        z = x - 2
        w = x * 2
    } else {
        y = x + 3
        z = x - 3
        w = x * 3
    }

ADD: SLICE_ELEMENT

BLOCK: i = 10   class = class org.jetbrains.kotlin.psi.KtBlockExpression (Kotlin reflection is not available)    text:
{
        y = x + 2
        z = x - 2
        w = x * 2
    }

ADD: SLICE_ELEMENT

BINARY_EXPRESSION: i = 11   class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
y = x + 2

ADD: SLICE_ELEMENT

BINARY_EXPRESSION: i = 12   class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
z = x - 2

ADD: SLICE_ELEMENT

BINARY_EXPRESSION: i = 13   class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
w = x * 2

ADD: SLICE_ELEMENT

BLOCK: i = 14   class = class org.jetbrains.kotlin.psi.KtBlockExpression (Kotlin reflection is not available)    text:
{
        y = x + 3
        z = x - 3
        w = x * 3
    }

ADD: CONTAINER

BINARY_EXPRESSION: i = 15   class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
y = x + 3

ADD: SLICE_ELEMENT

BINARY_EXPRESSION: i = 16   class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
z = x - 3

ADD: SLICE_ELEMENT

BINARY_EXPRESSION: i = 17   class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
w = x * 3

ADD: SLICE_ELEMENT

PROPERTY: i = 20   class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
val t = if (z == 1) { // !!!
            "z"
        } else if (w == 1) {
            str(y)
        } else "a"

ADD: SLICE_ELEMENT

IF: i = 20   class = class org.jetbrains.kotlin.psi.KtIfExpression (Kotlin reflection is not available)    text:
if (z == 1) { // !!!
            "z"
        } else if (w == 1) {
            str(y)
        } else "a"

ADD: SLICE_ELEMENT

BLOCK: i = 20   class = class org.jetbrains.kotlin.psi.KtBlockExpression (Kotlin reflection is not available)    text:
{ // !!!
            "z"
        }

ADD: SLICE_ELEMENT

STRING_TEMPLATE: i = 21   class = class org.jetbrains.kotlin.psi.KtStringTemplateExpression (Kotlin reflection is not available)    text:
"z"

ADD: SLICE_ELEMENT

IF: i = 22   class = class org.jetbrains.kotlin.psi.KtIfExpression (Kotlin reflection is not available)    text:
if (w == 1) {
            str(y)
        } else "a"

ADD: SLICE_ELEMENT

BLOCK: i = 22   class = class org.jetbrains.kotlin.psi.KtBlockExpression (Kotlin reflection is not available)    text:
{
            str(y)
        }

ADD: SLICE_ELEMENT

CALL_EXPRESSION: i = 23   class = class org.jetbrains.kotlin.psi.KtCallExpression (Kotlin reflection is not available)    text:
str(y)

ADD: SLICE_ELEMENT

STRING_TEMPLATE: i = 24   class = class org.jetbrains.kotlin.psi.KtStringTemplateExpression (Kotlin reflection is not available)    text:
"a"

ADD: SLICE_ELEMENT

CALL_EXPRESSION: i = 26   class = class org.jetbrains.kotlin.psi.KtCallExpression (Kotlin reflection is not available)    text:
println(t)

ADD: SLICE_ELEMENT

CALL_EXPRESSION: i = 27   class = class org.jetbrains.kotlin.psi.KtCallExpression (Kotlin reflection is not available)    text:
str(y)

SKIP

FUN: i = 30   class = class org.jetbrains.kotlin.psi.KtNamedFunction (Kotlin reflection is not available)    text:
fun str(i: Int) =
    "$i"

ADD: SLICE_ELEMENT

STRING_TEMPLATE: i = 31   class = class org.jetbrains.kotlin.psi.KtStringTemplateExpression (Kotlin reflection is not available)    text:
"$i"

ADD: SLICE_ELEMENT


==========SLICE ELEMENTS==========

PACKAGE_DIRECTIVE:
 

IMPORT_LIST:
 

FUN:
 fun main(){
    val x = readLine()!!.toInt() // 1 !!!
    val y: Int
    val z: Int
    val w: Int
    if (x > 0) { // !!!
        y = 1
        z = 1 // !!!
        w = 1
    } else if (x == 0) {
        y = x + 2
        z = x - 2
        w = x * 2
    } else {
        y = x + 3
        z = x - 3
        w = x * 3
    }

    val t = if (z == 1) { // !!!
            "z"
        } else if (w == 1) {
            str(y)
        } else "a"

    println(t) // !!!
    str(y)
}

BLOCK:
 {
    val x = readLine()!!.toInt() // 1 !!!
    val y: Int
    val z: Int
    val w: Int
    if (x > 0) { // !!!
        y = 1
        z = 1 // !!!
        w = 1
    } else if (x == 0) {
        y = x + 2
        z = x - 2
        w = x * 2
    } else {
        y = x + 3
        z = x - 3
        w = x * 3
    }

    val t = if (z == 1) { // !!!
            "z"
        } else if (w == 1) {
            str(y)
        } else "a"

    println(t) // !!!
    str(y)
}

PROPERTY:
 val x = readLine()!!.toInt() // 1 !!!

DOT_QUALIFIED_EXPRESSION:
 readLine()!!.toInt()

PROPERTY:
 val y: Int

PROPERTY:
 val z: Int

PROPERTY:
 val w: Int

IF:
 if (x > 0) { // !!!
        y = 1
        z = 1 // !!!
        w = 1
    } else if (x == 0) {
        y = x + 2
        z = x - 2
        w = x * 2
    } else {
        y = x + 3
        z = x - 3
        w = x * 3
    }

BLOCK:
 { // !!!
        y = 1
        z = 1 // !!!
        w = 1
    }

BINARY_EXPRESSION:
 y = 1

BINARY_EXPRESSION:
 z = 1

BINARY_EXPRESSION:
 w = 1

IF:
 if (x == 0) {
        y = x + 2
        z = x - 2
        w = x * 2
    } else {
        y = x + 3
        z = x - 3
        w = x * 3
    }

BLOCK:
 {
        y = x + 2
        z = x - 2
        w = x * 2
    }

BINARY_EXPRESSION:
 y = x + 2

BINARY_EXPRESSION:
 z = x - 2

BINARY_EXPRESSION:
 w = x * 2

BLOCK:
 {
        y = x + 3
        z = x - 3
        w = x * 3
    }

BINARY_EXPRESSION:
 y = x + 3

BINARY_EXPRESSION:
 z = x - 3

BINARY_EXPRESSION:
 w = x * 3

PROPERTY:
 val t = if (z == 1) { // !!!
            "z"
        } else if (w == 1) {
            str(y)
        } else "a"

IF:
 if (z == 1) { // !!!
            "z"
        } else if (w == 1) {
            str(y)
        } else "a"

BLOCK:
 { // !!!
            "z"
        }

STRING_TEMPLATE:
 "z"

IF:
 if (w == 1) {
            str(y)
        } else "a"

BLOCK:
 {
            str(y)
        }

CALL_EXPRESSION:
 str(y)

STRING_TEMPLATE:
 "a"

CALL_EXPRESSION:
 println(t)

FUN:
 fun str(i: Int) =
    "$i"

STRING_TEMPLATE:
 "$i"


==========ELEMENTS TO DELETE==========

CALL_EXPRESSION:
 str(y)

