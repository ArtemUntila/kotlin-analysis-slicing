PACKAGE_DIRECTIVE: i = 1   class = class org.jetbrains.kotlin.psi.KtPackageDirective (Kotlin reflection is not available)    text:
package scripts

ADD: ALWAYS_RETAINED_PSI_ELEMENT

IMPORT_LIST: i = 1   class = class org.jetbrains.kotlin.psi.KtImportList (Kotlin reflection is not available)    text:


ADD: ALWAYS_RETAINED_PSI_ELEMENT

CLASS: i = 3   class = class org.jetbrains.kotlin.psi.KtClass (Kotlin reflection is not available)    text:
class SomeClass {

    val a: Int

    constructor(a: Int) {
        this.a = if (a % 2 == 0) {
            a * 2
        } else {
            a
        }
    }

    override fun toString(): String {
        return a.toString()
    }
}

ADD: CONTAINER

CLASS_BODY: i = 3   class = class org.jetbrains.kotlin.psi.KtClassBody (Kotlin reflection is not available)    text:
{

    val a: Int

    constructor(a: Int) {
        this.a = if (a % 2 == 0) {
            a * 2
        } else {
            a
        }
    }

    override fun toString(): String {
        return a.toString()
    }
}

ADD: CONTAINER

PROPERTY: i = 5   class = class org.jetbrains.kotlin.psi.KtProperty (Kotlin reflection is not available)    text:
val a: Int

SKIP

SECONDARY_CONSTRUCTOR: i = 7   class = class org.jetbrains.kotlin.psi.KtSecondaryConstructor (Kotlin reflection is not available)    text:
constructor(a: Int) {
        this.a = if (a % 2 == 0) {
            a * 2
        } else {
            a
        }
    }

ADD: SLICE_ELEMENT

BLOCK: i = 7   class = class org.jetbrains.kotlin.psi.KtBlockExpression (Kotlin reflection is not available)    text:
{
        this.a = if (a % 2 == 0) {
            a * 2
        } else {
            a
        }
    }

ADD: SLICE_ELEMENT

BINARY_EXPRESSION: i = 8   class = class org.jetbrains.kotlin.psi.KtBinaryExpression (Kotlin reflection is not available)    text:
this.a = if (a % 2 == 0) {
            a * 2
        } else {
            a
        }

ADD: SLICE_ELEMENT

IF: i = 8   class = class org.jetbrains.kotlin.psi.KtIfExpression (Kotlin reflection is not available)    text:
if (a % 2 == 0) {
            a * 2
        } else {
            a
        }

ADD: SLICE_ELEMENT

BLOCK: i = 8   class = class org.jetbrains.kotlin.psi.KtBlockExpression (Kotlin reflection is not available)    text:
{
            a * 2
        }

ADD: SLICE_ELEMENT

REFERENCE_EXPRESSION: i = 11   class = class org.jetbrains.kotlin.psi.KtNameReferenceExpression (Kotlin reflection is not available)    text:
a

SKIP

FUN: i = 15   class = class org.jetbrains.kotlin.psi.KtNamedFunction (Kotlin reflection is not available)    text:
override fun toString(): String {
        return a.toString()
    }

SKIP


==========SLICE ELEMENTS==========

PACKAGE_DIRECTIVE:
 package scripts

IMPORT_LIST:
 

CLASS:
 class SomeClass {

    val a: Int

    constructor(a: Int) {
        this.a = if (a % 2 == 0) {
            a * 2
        } else {
            a
        }
    }

    override fun toString(): String {
        return a.toString()
    }
}

CLASS_BODY:
 {

    val a: Int

    constructor(a: Int) {
        this.a = if (a % 2 == 0) {
            a * 2
        } else {
            a
        }
    }

    override fun toString(): String {
        return a.toString()
    }
}

SECONDARY_CONSTRUCTOR:
 constructor(a: Int) {
        this.a = if (a % 2 == 0) {
            a * 2
        } else {
            a
        }
    }

BLOCK:
 {
        this.a = if (a % 2 == 0) {
            a * 2
        } else {
            a
        }
    }

BINARY_EXPRESSION:
 this.a = if (a % 2 == 0) {
            a * 2
        } else {
            a
        }

IF:
 if (a % 2 == 0) {
            a * 2
        } else {
            a
        }

BLOCK:
 {
            a * 2
        }

