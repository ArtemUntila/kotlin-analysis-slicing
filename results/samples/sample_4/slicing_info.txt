map: {main.kt=[20, 2, 3, 4, 6, 9, 10, 11, 14, 18, 17], Complex.kt=[17, 2, 3, 4, 7, 8, 9, 14, 36, 31], PhoneBook.kt=[3, 14, 15, 16, 41, 42, 46, 43, 57, 58, 61, 4, 44, 45, 79]}

main.kt:
2=    val a = Complex(2.2, 2.1)
3=    val b = -Complex("3.2+1.1i")
4=    val c = a + b
6=    val pb = PhoneBook()
9=    pb.addHuman(artyom)
10=    pb.addPhone(artyom, number1)
11=    pb.addPhone(artyom, "+7 981 111 11 11")
14=    pb.addHuman(alexander)
17=    pb.removePhone(artyom, number1)
18=    pb.addPhone(alexander, number1)
20=    println("$c\n${pb.humanByPhone(number1)}")

Complex.kt:
2=    val ss = s.substring(0, s.length - 1)
3=    val list = ss.split(Regex("""[+\- ]"""))
4=    val symbol = ss.replace(Regex("""[\d.i]+"""), "")
7=    if (symbol.length == 1) {
8=        real = list[0].toDouble()
9=        imaginate = if (symbol == "+") list[1].toDouble() else list[1].toDouble() * -1
14=    return Complex(real, imaginate)
17=class Complex(val re: Double, val im: Double) {
31=    operator fun plus(other: Complex): Complex = Complex(re + other.re, im + other.im)
36=    operator fun unaryMinus(): Complex = Complex(-re, -im)

PhoneBook.kt:
3=    private val book = mutableMapOf<String, MutableSet<String>>()
4=    private val phones = mutableMapOf<String, String>()
14=        if (book.containsKey(name)) return false
15=        book[name] = mutableSetOf()
16=        return true
41=        if (!book.containsKey(name)) return false
42=        for ((n, p) in book)
43=            if (p.contains(phone)) return false
44=        book[name]!!.add(phone)
45=        phones[phone] = name
46=        return true
57=        if (!book.containsKey(name)) return false
58=        if (!book[name]!!.contains(phone)) return false
61=        return true
79=    fun humanByPhone(phone: String): String? = phones[phone]

